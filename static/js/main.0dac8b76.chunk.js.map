{"version":3,"sources":["GameOver.tsx","services/DogAPI.tsx","MainStage.tsx","PastScores.tsx","res/learn-breeds-icon.png","services/ScoreRepo.ts","App.tsx","index.tsx"],"names":["GameOver","props","className","id","finalScore","onClick","onRestartGame","onGoBackToHome","DogBreeds","Rottweiler","Labrador","Shiba","Dachshund","Pitbull","Chihuahua","fetchDogImg","breedQuery","a","fetch","response","body","json","MainStage","onGameOver","useState","curScore","setCurScore","initialRoundTimeInSeconds","curTimeSeconds","setCurTimeSeconds","curTimer","useRef","isRoundOn","setIsRoundOn","randomDogBreedGenerator","Math","floor","random","Object","keys","length","answerDogBreedIndex","setAnswerDogBreedIndex","imgLink","isAnswer","breed","dogImages","setDogImages","isShowGame","setIsShowGame","useEffect","answerDogBreed","dogBreedToQuery","otherChoicesDogBreeds","i","curRandIndex","curBreed","filter","val","push","console","log","concat","tempDogImages","setTimeout","then","message","catch","err","roundTimer","clearTimeout","current","choiceCards","map","el","style","backgroundImage","promptBreed","find","PastScores","pastScoresList","score","date","onClearScores","getAllScores","savedScores","localStorage","getItem","JSON","parse","sort","b","Date","App","isGameOn","setIsGameOn","showGameOver","setShowGameOver","showPastScores","setShowPastScores","setPastScoresList","latestScore","setLatestScore","setRandomDogBreedIndex","timer","savedScoresList","setItem","stringify","saveScoreDatabase","toISOString","onNext","clear","allPastScores","src","mainLogo","height","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dac8b76.chunk.js","sourcesContent":["type GameOverProps = {\n    finalScore: number;\n    onRestartGame: () => void;\n    onGoBackToHome: () => void;\n};\n\nconst GameOver = (props: GameOverProps) => {\n    return (\n        <div className=\"gameover_screen\">\n            <div id=\"gameover_heading\"> Game Over! </div>\n            <div id=\"gameover_score_description\">Your Score Was:</div>\n            <div id=\"gameover_score_number\"> {props.finalScore} </div>\n            <button className=\"button\" onClick={props.onRestartGame}>\n                Try Again\n            </button>\n            <button className=\"button\" onClick={props.onGoBackToHome}>\n                Go Back to Home\n            </button>\n        </div>\n    );\n};\nexport default GameOver;\n","import { DogType } from \"../App\";\n\nexport const DogBreeds = {\n    Rottweiler: \"rottweiler\",\n    \"Golden Retriever\": \"retriever/golden\",\n    \"Irish Terrier\": \"terrier/irish\",\n    Labrador: \"labrador\",\n    Shiba: \"shiba\",\n    \"English Springer\": \"springer/english\",\n    \"Border Collie\": \"collie/border\",\n    Dachshund: \"dachshund\",\n    \"Tibetan Mastiff\": \"mastiff/tibetan\",\n    Pitbull: \"pitbull\",\n    \"German Shepherd\": \"germanshepherd\",\n    Chihuahua: \"chihuahua\",\n    \"Yorkshire Terrier\": \"terrier/yorkshire\",\n};\n\nexport const fetchDogImg = async (breedQuery: string): Promise<DogType> => {\n    const response = await fetch(\n        `https://dog.ceo/api/breed/${breedQuery}/images/random`\n    );\n    const body: Promise<DogType> = response.json();\n    // console.log(body);\n    // const message = (await body).message;\n    return body;\n};\n","import { clear } from \"console\";\nimport { useEffect, useRef, useState } from \"react\";\nimport GameOver from \"./GameOver\";\nimport { DogBreeds, fetchDogImg } from \"./services/DogAPI\";\ntype MainStageProps = {\n    dogBreedToQuery: { [key: string]: string };\n    onNext: (isAnswer: boolean) => void;\n    initialRoundTimeInSeconds: number;\n    onGameOver: (curScore: number) => void;\n    onGoBackToHome: () => void;\n};\n\ntype DogImages = {\n    imgLink: string;\n    isAnswer: boolean;\n    breed: string;\n}; //[key: string]: string[] | string }\n\nconst MainStage = (props: MainStageProps) => {\n    const { onGameOver } = props;\n    const [curScore, setCurScore] = useState(0);\n    const [curTimeSeconds, setCurTimeSeconds] = useState(\n        props.initialRoundTimeInSeconds\n    );\n\n    const curTimer = useRef<NodeJS.Timeout | null>(null);\n\n    const [isRoundOn, setIsRoundOn] = useState(false);\n\n    //get random images for each category, including answer\n    const randomDogBreedGenerator = () => {\n        return Math.floor(Math.random() * Object.keys(DogBreeds).length);\n    };\n    const [answerDogBreedIndex, setAnswerDogBreedIndex] = useState(\n        randomDogBreedGenerator()\n    );\n    const [dogImages, setDogImages] = useState<DogImages[]>([\n        { imgLink: \"\", isAnswer: false, breed: \"dfsdf\" },\n    ]);\n    const [isShowGame, setIsShowGame] = useState(false);\n\n    const shuffleArray = <T extends unknown>(arrayToShuffle: T[]) => {\n        const copyArrayToShuffle = arrayToShuffle.slice();\n        for (let i = 0; i < copyArrayToShuffle.length; i++) {\n            const randIndex = Math.floor(\n                Math.random() * copyArrayToShuffle.length\n            );\n\n            [copyArrayToShuffle[i], copyArrayToShuffle[randIndex]] = [\n                copyArrayToShuffle[randIndex],\n                copyArrayToShuffle[i],\n            ];\n        }\n        return copyArrayToShuffle;\n    };\n\n    useEffect(() => {\n        const answerDogBreed = Object.keys(props.dogBreedToQuery)[\n            answerDogBreedIndex\n        ];\n        //getting string breeds of correct length of choices that are not the answer\n        let otherChoicesDogBreeds: string[] = [];\n        const lengthChoicesNotAnswer = 2;\n        for (let i = 0; i < lengthChoicesNotAnswer; i++) {\n            const curRandIndex = Math.floor(\n                Math.random() * (Object.keys(props.dogBreedToQuery).length - 1)\n            );\n            const curBreed = Object.keys(props.dogBreedToQuery).filter(\n                (val) => val !== answerDogBreed\n            )[curRandIndex];\n            otherChoicesDogBreeds.push(curBreed);\n        }\n        console.log(otherChoicesDogBreeds.concat(answerDogBreed));\n        const tempDogImages: DogImages[] = [];\n        //fetch dog images asynchronously\n        setTimeout(() => {\n            for (const breed of otherChoicesDogBreeds.concat(answerDogBreed)) {\n                // console.log(props.dogBreedToQuery[breed]);\n                fetchDogImg(props.dogBreedToQuery[breed])\n                    .then((response) => {\n                        console.log(response.message);\n                        let curBreed = {\n                            imgLink: response.message,\n                            breed: breed,\n                            isAnswer: breed === answerDogBreed,\n                        };\n\n                        setIsShowGame(true);\n                        setIsRoundOn(true);\n\n                        tempDogImages.push(curBreed);\n                        setDogImages([...tempDogImages]);\n                    })\n                    .catch((err) => console.log(`API issues: ${err}`));\n            }\n        }, 1000);\n    }, [curScore, answerDogBreedIndex, props.dogBreedToQuery]);\n\n    useEffect(() => {\n        if (!isRoundOn) {\n            return;\n        }\n        //create timer\n\n        const roundTimer = setTimeout(() => {\n            setCurTimeSeconds(curTimeSeconds - 1);\n            if (curTimeSeconds <= 0) {\n                setIsRoundOn(false);\n                setCurTimeSeconds(props.initialRoundTimeInSeconds);\n                clearTimeout(roundTimer);\n                onGameOver(curScore);\n            }\n        }, 1000);\n        curTimer.current = roundTimer;\n        // return clearTimeout(roundTimer);\n        // return clearTimeout(roundTimer);\n    }, [\n        onGameOver,\n        curScore,\n        props.initialRoundTimeInSeconds,\n        curTimeSeconds,\n        isRoundOn,\n    ]);\n\n    const choiceCards = dogImages.map((el) => {\n        return (\n            <div\n                key={el.imgLink}\n                className=\"card\"\n                onClick={() => {\n                    setAnswerDogBreedIndex(randomDogBreedGenerator());\n\n                    setIsRoundOn(false);\n                    setCurTimeSeconds(props.initialRoundTimeInSeconds);\n                    if (curTimer.current) clearTimeout(curTimer.current);\n                    if (el.isAnswer) setCurScore(curScore + 25);\n                    else props.onGameOver(curScore);\n                    // props.onNext(el.isAnswer);\n                    console.log(el.isAnswer);\n                }}\n            >\n                <div\n                    className={`wrapper ${\n                        el.isAnswer && !isRoundOn\n                            ? \"answer\"\n                            : !el.isAnswer && !isRoundOn\n                            ? \"other\"\n                            : \"\"\n                    }`}\n                >\n                    <div\n                        className=\"card_img\"\n                        style={{ backgroundImage: `url(${el.imgLink})` }}\n                    ></div>\n                </div>\n            </div>\n        );\n    });\n\n    const promptBreed = dogImages.find((el) => el.isAnswer)?.breed || \"\";\n    /*\n    return (\n        <div>\n            {dogImages.map((el) => {\n                return el.breed;\n            })}\n        </div>\n    );\n    */\n    //choosing answer category\n\n    //debug with dog breeds:\n    /*\n    <div>\n                {dogImages.map((el) => {\n                    return el.breed;\n                })}\n            </div>\n    */\n    return isShowGame ? (\n        <div>\n            <div className=\"header_bar\">\n                <div\n                    className=\"header_item\"\n                    id=\"header_bar_home_btn\"\n                    onClick={props.onGoBackToHome}\n                >\n                    Back to Home\n                </div>\n                <div className=\"header_item\" id=\"header_bar_timer\">\n                    {`Time: ${curTimeSeconds}`}\n                </div>\n                <div className=\"header_item\" id=\"header_bar_score\">\n                    Score:\n                    <strong> {` ${curScore}`} </strong>\n                </div>\n            </div>\n            <div className=\"main_screen\">\n                <div className=\"prompt\">\n                    <h2> Which picture is a {promptBreed}</h2>\n                </div>\n                <div className=\"card_choices\">{choiceCards}</div>\n            </div>\n        </div>\n    ) : (\n        <div>Loading ... </div>\n    );\n\n    /*\n    return (\n        \n        <div>\n            <div className=\"prompt\">\n                <h2> Which picture is a {dogBreed}</h2>\n            </div>\n            <div className=\"row\">\n                <div className=\"card\">\n                    <div className=\"wrapper\">\n                        <div\n                            className=\"card_img\"\n                            style={{ backgroundImage: `url(${dogImage})` }}\n                        ></div>\n                    </div>\n                </div>\n                <div className=\"card\">\n                    <div className=\"wrapper\">\n                        <div\n                            className=\"card_img\"\n                            style={{ backgroundImage: `url(${dogImage})` }}\n                        ></div>\n                    </div>\n                </div>\n                <div className=\"card\">\n                    <div className=\"wrapper\">\n                        <div\n                            className=\"card_img\"\n                            style={{ backgroundImage: `url(${dogImage})` }}\n                        ></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n    */\n};\n\nexport default MainStage;\n","import { ScoreType } from \"./services/ScoreRepo\";\n\ntype PastScoresProps = {\n    pastScoresList: ScoreType[];\n    onGoBackToHome: () => void;\n    onClearScores: () => void;\n};\n\nconst PastScores = (props: PastScoresProps) => {\n    return (\n        <div className=\"past_scores_screen\">\n            <div id=\"past_scores_screen_heading\"> Past Scores</div>\n            <div>\n                <ol>\n                    {props.pastScoresList.map((el) => {\n                        return <li key={el.date}>{el.score}</li>;\n                    })}\n                </ol>\n            </div>\n            <button\n                className=\"button past_scores_screen_btn\"\n                onClick={props.onGoBackToHome}\n            >\n                Go Back to Home\n            </button>\n            <button\n                className=\"button past_scores_screen_btn\"\n                id=\"past_scores_screen_clear_btn\"\n                onClick={props.onClearScores}\n            >\n                Clear Scores\n            </button>\n        </div>\n    );\n};\n\nexport default PastScores;\n","export default __webpack_public_path__ + \"static/media/learn-breeds-icon.64e8b116.png\";","export type ScoreType = {\n    score: number;\n    date: string;\n};\n\nexport const getAllScores = (): ScoreType[] => {\n    const savedScores = localStorage.getItem(\"game_scores\");\n    const parsedScores = savedScores ? JSON.parse(savedScores) : [];\n    return parsedScores.sort((a: ScoreType, b: ScoreType) => {\n        return new Date(a.date) > new Date(b.date) ? -1 : 1;\n    });\n};\n\nexport const saveScoreDatabase = (score: ScoreType) => {\n    const savedScoresList = getAllScores();\n    savedScoresList.push(score);\n    localStorage.setItem(\"game_scores\", JSON.stringify(savedScoresList));\n};\n\nexport const deleteAllScores = () => {\n    localStorage.clear();\n};\n","import { useRef, useState } from \"react\";\nimport GameOver from \"./GameOver\";\nimport MainStage from \"./MainStage\";\nimport PastScores from \"./PastScores\";\nimport { DogBreeds } from \"./services/DogAPI\";\nimport mainLogo from \"./res/learn-breeds-icon.png\";\nimport {\n    deleteAllScores,\n    getAllScores,\n    saveScoreDatabase,\n    ScoreType,\n} from \"./services/ScoreRepo\";\nexport type DogType = {\n    message: string;\n    status: string;\n};\nconst App = () => {\n    const [dogBreed, setDogBreed] = useState(\"\");\n    const [isGameOn, setIsGameOn] = useState(false);\n    const [showGameOver, setShowGameOver] = useState(false);\n    const [showPastScores, setShowPastScores] = useState(false);\n    const [pastScoresList, setPastScoresList] = useState<ScoreType[]>([]);\n    const [latestScore, setLatestScore] = useState(0);\n    const curTimer = useRef<NodeJS.Timeout | null>(null);\n\n    const randomDogBreedGenerator = () => {\n        return Math.floor(Math.random() * Object.keys(DogBreeds).length);\n    };\n    const [randomDogBreedIndex, setRandomDogBreedIndex] = useState(\n        randomDogBreedGenerator()\n    );\n\n    const onNext = (isAnswer: boolean) => {\n        // if (isAnswer) setCurScore(curScore + 15);\n        console.log(\"incremented Score\");\n        // setRandomDogBreedIndex(-1);\n        setRandomDogBreedIndex(randomDogBreedGenerator());\n    };\n\n    const onRestartGame = () => {\n        if (curTimer.current) clearTimeout(curTimer.current);\n        setLatestScore(0);\n        setIsGameOn(true);\n        setShowGameOver(false);\n        setShowPastScores(false);\n    };\n    const onGoBackToHome = () => {\n        if (curTimer.current) clearTimeout(curTimer.current);\n        setLatestScore(0);\n        setIsGameOn(false);\n        setShowGameOver(false);\n        setShowPastScores(false);\n    };\n    const onShowPastScores = () => {\n        if (curTimer.current) clearTimeout(curTimer.current);\n        const allPastScores = getAllScores();\n\n        setPastScoresList(allPastScores);\n        setLatestScore(0);\n        setIsGameOn(false);\n        setShowGameOver(false);\n        setShowPastScores(true);\n    };\n    const onGameOver = (curScore: number) => {\n        const timer = setTimeout(() => {\n            setLatestScore(curScore);\n            let latestScore = {\n                score: curScore,\n                date: new Date().toISOString(),\n            };\n            saveScoreDatabase(latestScore);\n            setIsGameOn(false);\n            setShowGameOver(true);\n            setShowPastScores(false);\n        }, 1000);\n        curTimer.current = timer;\n    };\n\n    const onClearScores = () => {\n        deleteAllScores();\n        const allPastScores = getAllScores();\n        setPastScoresList(allPastScores);\n    };\n\n    /*\n\n                <button onClick={() => setDogBreed(\"Retriever\")}>\n                    Retriever\n                </button>\n                <button onClick={() => setDogBreed(\"Rottweiler\")}>\n                    Rottweiler\n                </button>\n                <button onClick={() => setDogBreed(\"Chihuahua\")}>\n                    Chihuahua\n                </button>\n    */\n    if (isGameOn)\n        return (\n            <div>\n                <div>\n                    <MainStage\n                        onGoBackToHome={onGoBackToHome}\n                        onGameOver={onGameOver}\n                        initialRoundTimeInSeconds={15}\n                        onNext={onNext}\n                        dogBreedToQuery={DogBreeds}\n                    ></MainStage>\n                </div>\n            </div>\n        );\n    else if (showGameOver)\n        return (\n            <GameOver\n                finalScore={latestScore}\n                onRestartGame={onRestartGame}\n                onGoBackToHome={onGoBackToHome}\n            ></GameOver>\n        );\n    else if (showPastScores)\n        return (\n            <PastScores\n                onClearScores={onClearScores}\n                pastScoresList={pastScoresList}\n                onGoBackToHome={onGoBackToHome}\n            ></PastScores>\n        );\n    else\n        return (\n            <div className=\"home_screen\">\n                <img src={mainLogo} height={80} width={80}></img>\n                <h1 id=\"home_screen_heading\"> Paws a Litter</h1>\n                <button className=\"button\" onClick={onRestartGame}>\n                    Start Game\n                </button>\n                <button className=\"button\" onClick={onShowPastScores}>\n                    Show Past Scores\n                </button>\n            </div>\n        );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}