{"version":3,"sources":["components/GameOver.tsx","services/DogAPI.tsx","components/MainStage.tsx","components/HighScores.tsx","res/learn-breeds-icon.png","App.tsx","index.tsx"],"names":["GameOver","props","className","id","finalScore","onClick","onRestartGame","onGoBackToHome","easyBreeds","Chihuahua","Rottweiler","Dachshund","Beagle","hardBreeds","Affenpinscher","Akita","Appenzeller","Basenji","Borzoi","Boxer","Briard","Chow","Cockapoo","Coonhound","Dhole","Dingo","Entlebucher","Groenendael","Havanese","Keeshond","Kelpie","Komondor","Kuvasz","Labradoodle","Leonberg","Malamute","Malinois","Maltese","Bullmastiff","Newfoundland","Otterhound","Papillon","Pekinese","Pembroke","Pomeranian","Pug","Puggle","Saluki","Samoyed","Schipperke","Tervuren","Vizsla","Weimaraner","Whippet","fetchDogImg","breedQuery","a","fetch","response","body","json","MainStage","onGameOver","useState","curScore","setCurScore","initialRoundTimeInSeconds","curTimeSeconds","setCurTimeSeconds","curTimer","useRef","proportionOfEasyBreeds","setProportionOfEasyBreeds","isRoundOn","setIsRoundOn","randomDogBreedGenerator","useCallback","totalWeightedBreeds","Object","keys","length","currentLevel","Math","random","imgLink","isAnswer","breed","dogImages","setDogImages","isShowGame","setIsShowGame","useEffect","dogBreedsToQuery","temp","slice","breedsToShow","tempRandoms","i","tempRandom","curRandomIndex","floor","push","curBreed","filter","console","log","answerBreed","tempDogImages","setTimeout","then","message","catch","err","roundTimer","clearTimeout","current","choiceCards","map","el","max","style","backgroundImage","backgroundSize","promptBreed","find","HighScores","highScoreLevel","setHighScoreLevel","userList","idx","username","Date","lastUpdated","toLocaleDateString","uuid","db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getFirestore","auth","getAuth","App","isGameOn","setIsGameOn","showGameOver","setShowGameOver","userName","setUserName","setUserList","showHighScores","setShowHighScores","latestScore","setLatestScore","setCurrentLevel","setIsSignedIn","initializedState","setInitializedState","easy","hard","personalBest","setPersonalBest","setUuid","signInAnonymously","onAuthStateChanged","user","uid","getDoc","doc","exists","data","error","code","getDocs","query","collection","orderBy","docs","curUserList","forEach","scoreToSave","saveScore","setDoc","toISOString","timer","src","mainLogo","alt","height","width","type","placeholder","value","onChange","e","currentTarget","textAlign","marginTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5331038f.chunk.js","sourcesContent":["type GameOverProps = {\n    finalScore: number;\n    onRestartGame: () => void;\n    onGoBackToHome: () => void;\n};\n\nconst GameOver = (props: GameOverProps) => {\n    return (\n        <div className=\"gameover_screen\">\n            <div id=\"gameover_heading\"> Game Over! </div>\n            <div id=\"gameover_score_description\">Your Score Was:</div>\n            <div id=\"gameover_score_number\"> {props.finalScore} </div>\n            <button className=\"button\" onClick={props.onRestartGame}>\n                Try Again\n            </button>\n            <button className=\"button\" onClick={props.onGoBackToHome}>\n                Go Back to Home\n            </button>\n        </div>\n    );\n};\nexport default GameOver;\n","import { DogType } from \"../App\";\n\nexport const easyBreeds = {\n    Chihuahua: \"chihuahua\",\n    \"Labrador Retriever\": \"labrador\",\n    \"Border Collie\": \"collie/border\",\n    \"German Shepherd\": \"germanshepherd\",\n    \"Siberian Husky\": \"husky\",\n    \"Doberman Pinscher\": \"doberman\",\n    \"Saint Bernard\": \"stbernard\",\n    Rottweiler: \"rottweiler\",\n    Dachshund: \"dachshund\",\n    \"Golden Retriever\": \"retriever/golden\",\n    \"English Bulldog\": \"bulldog/english\",\n    \"Shih Tzu\": \"shihtzu\",\n    \"West Highland White Terrier\": \"terrier/westhighland\",\n    \"French Bulldog\": \"bulldog/french\",\n    \"Cardigan Welsh Corgi\": \"corgi/cardigan\",\n    \"English Springer Spaniel\": \"springer/english\",\n    // Dalmatian: \"dalmatian\", // only showing two different images\n    \"Great Dane\": \"dane/great\",\n    Beagle: \"beagle\",\n    \"Cocker Spaniel\": \"spaniel/cocker\",\n};\n\nexport const hardBreeds = {\n    Affenpinscher: \"affenpinscher\",\n    \"African Wild Dog\": \"african\",\n    \"Airedale Terrier\": \"airedale\",\n    Akita: \"akita\",\n    Appenzeller: \"appenzeller\",\n    \"Australian Shepherd\": \"australian/shepherd\",\n    Basenji: \"basenji\",\n\n    \"Bluetick Coonhound\": \"bluetick\",\n    Borzoi: \"borzoi\",\n    \"Bouvier des Flandres\": \"bouvier\",\n    Boxer: \"boxer\",\n    \"Brabancon Griffon\": \"brabancon\",\n    Briard: \"briard\",\n    \"Norwegian Buhund\": \"buhund/norwegian\",\n    \"Boston Bulldog\": \"bulldog/boston\",\n\n    \"Staffordshire Bull Terrier\": \"bullterrier/staffordshire\",\n    \"Australian Cattle Dog\": \"cattledog/australian\",\n\n    Chow: \"chow\",\n    \"Clumber Spaniel\": \"clumber\",\n    Cockapoo: \"cockapoo\",\n\n    Coonhound: \"coonhound\",\n\n    \"Coton de Tulear\": \"cotondetulear\",\n\n    \"Scottish Deerhound\": \"deerhound/scottish\",\n    Dhole: \"dhole\",\n    Dingo: \"dingo\",\n\n    \"Norwegian Elkhound\": \"elkhound/norwegian\",\n    Entlebucher: \"entlebucher\",\n    \"Eskimo Dog\": \"eskimo\",\n    \"Finnish Lapphund\": \"finnish/lapphund\",\n    \"Bichon Frise\": \"frise/bichon\",\n\n    \"Italian Greyhound\": \"greyhound/italian\",\n    Groenendael: \"groenendael\",\n    Havanese: \"havanese\",\n    \"Afghan Hound\": \"hound/afghan\",\n    \"Basset Hound\": \"hound/basset\",\n    \"Blood Hound\": \"hound/blood\",\n    \"English Hound\": \"hound/english\",\n    \"Ibizan Hound\": \"hound/ibizan\",\n    \"Plott Hound\": \"hound/plott\",\n    \"Walker Hound\": \"hound/walker\",\n\n    Keeshond: \"keeshond\",\n    Kelpie: \"kelpie\",\n    Komondor: \"komondor\",\n    Kuvasz: \"kuvasz\",\n    Labradoodle: \"labradoodle\",\n\n    Leonberg: \"leonberg\",\n    \"Lhasa Apso\": \"lhasa\",\n    Malamute: \"malamute\",\n    Malinois: \"malinois\",\n    Maltese: \"maltese\",\n    Bullmastiff: \"mastiff/bull\",\n    \"English Mastiff\": \"mastiff/english\",\n    \"Tibetaan Mastiff\": \"mastiff/tibetan\",\n    \"Mexican Hairless\": \"mexicanhairless\",\n    \"Bernese Mountain Dog\": \"mountain/bernese\",\n    \"Swiss Mountain Dog\": \"mountain/swiss\",\n    Newfoundland: \"newfoundland\",\n    Otterhound: \"otterhound\",\n    \"Caucasian Ovcharka\": \"ovcharka/caucasian\",\n    Papillon: \"papillon\",\n    Pekinese: \"pekinese\",\n    Pembroke: \"pembroke\",\n    \"Miniature Pinscher\": \"pinscher/miniature\",\n\n    \"German Longhaired Pointer\": \"pointer/germanlonghair\",\n    \"German Pointer\": \"pointer/german\",\n    Pomeranian: \"pomeranian\",\n    \"Miniature Poodle\": \"poodle/miniature\",\n    \"Standard Poodle\": \"poodle/standard\",\n    \"Toy Poodle\": \"poodle/toy\",\n    Pug: \"pug\",\n    Puggle: \"puggle\",\n    \"Great Pyrenees\": \"pyrenees\",\n    \"Redbone Coonhound\": \"redbone\",\n    \"Chesapeake Bay Retriever\": \"retriever/chesapeake\",\n    \"Curly Retriever\": \"retriever/curly\",\n    \"Flatcoated Retriever\": \"retriever/flatcoated\",\n\n    \"Rhodesian Ridgeback\": \"ridgeback/rhodesian\",\n\n    Saluki: \"saluki\",\n    Samoyed: \"samoyed\",\n    Schipperke: \"schipperke\",\n    \"Giant Schnauzer\": \"schnauzer/giant\",\n    \"Miniature Schnauzer\": \"schnauzer/miniature\",\n    \"English Setter\": \"setter/english\",\n    \"Gordon Setter\": \"setter/gordon\",\n    \"Irish Setter\": \"setter/irish\",\n    \"English Sheepdog\": \"sheepdog/english\",\n    \"Shetland Sheepdog\": \"sheepdog/shetland\",\n    \"Shiba Inu\": \"shiba\",\n\n    \"Blenheim Spaniel\": \"spaniel/blenheim\",\n    \"Brittany Spaniel\": \"spaniel/brittany\",\n\n    \"Irish Water Spaniel\": \"spaniel/irish\",\n    \"Japanese Spaniel\": \"spaniel/japanese\",\n    \"Sussex Spaniel\": \"spaniel/sussex\",\n    \"Welsh Springer Spaniel\": \"spaniel/welshspringer\",\n\n    \"American Staffordshire Terrier\": \"terrier/american\",\n    \"Australian Terrier\": \"terrier/australian\",\n    \"Bedlington Terrier\": \"terrier/bedlington\",\n    \"Border Terrier\": \"terrier/border\",\n    \"Cairn Terrier\": \"terrier/cairn\",\n    \"Dandie Dinmont Terrier\": \"terrier/dandie\",\n    \"Fox Terrier\": \"terrier/fox\",\n    \"Irish Terrier\": \"terrier/irish\",\n    \"Kerry Blue Terrier\": \"terrier/kerryblue\",\n    \"Lakeland Terrier\": \"terrier/lakeland\",\n    \"Norfolk Terrier\": \"terrier/norfolk\",\n    \"Norwich Terrier\": \"terrier/norwich\",\n    \"Patterdale Terrier\": \"terrier/patterdale\",\n    \"Russell Terrier\": \"terrier/russell\",\n    \"Scottish Terrier\": \"terrier/scottish\",\n    \"Sealyham Terrier\": \"terrier/sealyham\",\n    \"Silky Terrier\": \"terrier/silky\",\n    \"Tibetan Terrier\": \"terrier/tibetan\",\n    \"Toy Fox Terrier\": \"terrier/toy\",\n    \"Welsh Terrier\": \"terrier/welsh\",\n\n    \"Wheaten Terrier\": \"terrier/wheaten\",\n    \"Yorkshire Terrier\": \"terrier/yorkshire\",\n    Tervuren: \"tervuren\",\n    Vizsla: \"vizsla\",\n    \"Spanish Water Dog\": \"waterdog/spanish\",\n    Weimaraner: \"weimaraner\",\n    Whippet: \"whippet\",\n    \"Irish Wolfhound\": \"wolfhound/irish\",\n};\n\nexport const fetchDogImg = async (breedQuery: string): Promise<DogType> => {\n    const response = await fetch(\n        `https://dog.ceo/api/breed/${breedQuery}/images/random`\n    );\n    const body: Promise<DogType> = response.json();\n    // console.log(body);\n    // const message = (await body).message;\n    return body;\n};\n","import { clear } from \"console\";\nimport { useEffect, useRef, useState, useCallback } from \"react\";\nimport GameOver from \"./GameOver\";\nimport { easyBreeds, hardBreeds, fetchDogImg } from \"./../services/DogAPI\";\n\ntype MainStageProps = {\n    initialRoundTimeInSeconds: number;\n    onGameOver: (curScore: number) => void;\n    onGoBackToHome: () => void;\n    currentLevel: string;\n};\n\ntype DogImages = {\n    imgLink: string;\n    isAnswer: boolean;\n    breed: string;\n}; //[key: string]: string[] | string }\n\nconst MainStage = (props: MainStageProps) => {\n    const { onGameOver } = props;\n    const [curScore, setCurScore] = useState(0);\n    const [curTimeSeconds, setCurTimeSeconds] = useState(\n        props.initialRoundTimeInSeconds\n    );\n\n    const curTimer = useRef<NodeJS.Timeout | null>(null);\n    const [proportionOfEasyBreeds, setProportionOfEasyBreeds] = useState(1);\n\n    const [isRoundOn, setIsRoundOn] = useState(false);\n    const handleGoBackToHome = () => {\n        setIsRoundOn(false);\n        onGameOver(0);\n        props.onGoBackToHome();\n    };\n\n    //get random images for each category, including answer\n\n    const randomDogBreedGenerator = useCallback(() => {\n        // if easy level\n\n        let isEasyChosen = false;\n        let answerBreed;\n        let otherChoicesBreeds = [];\n        const totalWeightedBreeds =\n            Object.keys(easyBreeds).length *\n                (props.currentLevel === \"easy\" ? proportionOfEasyBreeds : 0.2) +\n            Object.keys(hardBreeds).length *\n                (props.currentLevel === \"easy\"\n                    ? 1 - proportionOfEasyBreeds\n                    : 0.8);\n\n        const randomWeightedSelector = Math.random() * totalWeightedBreeds;\n        if (\n            randomWeightedSelector <\n            Object.keys(easyBreeds).length * proportionOfEasyBreeds\n        )\n            return easyBreeds;\n        else return hardBreeds;\n    }, [proportionOfEasyBreeds, props.currentLevel]);\n\n    const [dogImages, setDogImages] = useState<DogImages[]>([\n        { imgLink: \"\", isAnswer: false, breed: \"dfsdf\" },\n    ]);\n    const [isShowGame, setIsShowGame] = useState(false);\n    const updateProportions = () => {\n        if (curScore > 0 && curScore % 85 == 0)\n            setProportionOfEasyBreeds(\n                Math.max(0, proportionOfEasyBreeds - 0.2)\n            );\n    };\n\n    //fetching random dog breed images before a round begins\n    useEffect(() => {\n        if (isRoundOn) return; //if round is on, do not fetch images\n        let dogBreedsToQuery = randomDogBreedGenerator();\n\n        let temp = Object.keys(dogBreedsToQuery).slice();\n        let breedsToShow: string[] = [];\n        let tempRandoms: number[] = [];\n        for (let i = 0; i < 3; i++) {\n            let tempRandom = Math.random() * temp.length;\n            let curRandomIndex = Math.floor(tempRandom);\n            tempRandoms.push(tempRandom);\n            let curBreed: keyof typeof dogBreedsToQuery = temp[\n                curRandomIndex\n            ] as keyof typeof dogBreedsToQuery;\n            temp = temp.filter((breed) => breed !== curBreed);\n            breedsToShow.push(curBreed);\n        }\n        console.log(\"breedsToShow\", breedsToShow, tempRandoms);\n        const answerBreed = breedsToShow[Math.floor(Math.random() * 127) % 3];\n\n        const tempDogImages: DogImages[] = [];\n\n        //fetch dog images asynchronously\n        setTimeout(() => {\n            for (const breed of breedsToShow) {\n                fetchDogImg(\n                    dogBreedsToQuery[breed as keyof typeof dogBreedsToQuery]\n                )\n                    .then((response) => {\n                        console.log(response.message);\n                        let curBreed = {\n                            imgLink: response.message,\n                            breed: breed,\n                            isAnswer: breed === answerBreed,\n                        };\n\n                        setIsShowGame(true);\n                        setIsRoundOn(true);\n\n                        tempDogImages.push(curBreed);\n                        setDogImages([...tempDogImages]);\n                    })\n                    .catch((err) => console.log(`API issues: ${err}`));\n            }\n        }, 1000);\n    }, [curScore, randomDogBreedGenerator]);\n\n    //updating game variables and calling game over if time runs out\n    useEffect(() => {\n        if (!isRoundOn) {\n            return;\n        }\n        //create timer\n\n        const roundTimer = setTimeout(() => {\n            setCurTimeSeconds(curTimeSeconds - 1);\n            if (curTimeSeconds <= 0) {\n                setIsRoundOn(false);\n                setCurTimeSeconds(props.initialRoundTimeInSeconds);\n                clearTimeout(roundTimer);\n                onGameOver(curScore);\n            }\n        }, 1000);\n        curTimer.current = roundTimer;\n        // return clearTimeout(roundTimer);\n        // return clearTimeout(roundTimer);\n    }, [\n        onGameOver,\n        curScore,\n        props.initialRoundTimeInSeconds,\n        curTimeSeconds,\n        isRoundOn,\n    ]);\n\n    const choiceCards = dogImages.map((el) => {\n        return (\n            <div\n                key={el.imgLink}\n                className=\"card\"\n                onClick={() => {\n                    setIsRoundOn(false);\n                    // setCurTimeSeconds(props.initialRoundTimeInSeconds);\n                    setCurTimeSeconds(curTimeSeconds + 2);\n                    updateProportions(); //update proportions\n                    if (curTimer.current) clearTimeout(curTimer.current);\n                    if (el.isAnswer) setCurScore(curScore + 25);\n                    else props.onGameOver(curScore);\n                    // props.onNext(el.isAnswer);\n                    console.log(el.isAnswer);\n                }}\n            >\n                <div\n                    className={`wrapper ${\n                        el.isAnswer && !isRoundOn\n                            ? \"answer\"\n                            : !el.isAnswer && !isRoundOn\n                            ? \"other\"\n                            : \"\"\n                    }`}\n                >\n                    <div\n                        className=\"card_img\"\n                        style={{\n                            backgroundImage: `url(${el.imgLink})`,\n                            backgroundSize: \"auto 100%\",\n                        }}\n                    ></div>\n                </div>\n            </div>\n        );\n    });\n\n    const promptBreed = dogImages.find((el) => el.isAnswer)?.breed || \"\";\n\n    return isShowGame ? (\n        <div>\n            <div className=\"header_bar\">\n                <div\n                    className=\"header_item\"\n                    id=\"header_bar_home_btn\"\n                    onClick={handleGoBackToHome}\n                >\n                    Back to Home\n                </div>\n                <div className=\"header_item\" id=\"header_bar_timer\">\n                    {`Time: ${curTimeSeconds}`}\n                </div>\n                <div className=\"header_item\" id=\"header_bar_score\">\n                    Score:\n                    <strong> {` ${curScore}`} </strong>\n                </div>\n            </div>\n            <div className=\"main_screen\">\n                <div className=\"prompt\">\n                    <h2> Which picture is a {promptBreed}</h2>\n                </div>\n                <div className=\"card_choices\">{choiceCards}</div>\n            </div>\n        </div>\n    ) : (\n        <div>Loading ... </div>\n    );\n};\n\nexport default MainStage;\n","import { UserType } from \"../App\";\nimport { ScoreType } from \"../services/ScoreRepo\";\n\ntype HighScoresProps = {\n    userList: UserType[];\n    onGoBackToHome: () => void;\n    highScoreLevel: \"easy\" | \"hard\";\n    setHighScoreLevel: (level: \"easy\" | \"hard\") => void;\n};\n\nconst HighScores = (props: HighScoresProps) => {\n    return (\n        <div className=\"high_scores_screen\">\n            <div id=\"high_scores_screen_heading\"> High Scores</div>\n\n            <div className=\"high_scores_list\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Rank</th>\n                            <th>Username</th>\n                            <th>\n                                Score{\" \"}\n                                <div\n                                    className={`level easy ${\n                                        props.highScoreLevel === \"easy\"\n                                            ? \"chosen-level\"\n                                            : \"\"\n                                    }`}\n                                    onClick={() =>\n                                        props.setHighScoreLevel(\"easy\")\n                                    }\n                                >\n                                    Easy\n                                </div>\n                                <div\n                                    className={`level hard ${\n                                        props.highScoreLevel === \"hard\"\n                                            ? \"chosen-level\"\n                                            : \"\"\n                                    }`}\n                                    onClick={() =>\n                                        props.setHighScoreLevel(\"hard\")\n                                    }\n                                >\n                                    Hard\n                                </div>\n                            </th>\n                            <th>Last Updated</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {props.userList.map((el, idx) => {\n                            return (\n                                <tr key={el.uuid}>\n                                    <td>{idx + 1}.</td>\n                                    <td>{el.username}</td>\n                                    <td>\n                                        {\n                                            el[\n                                                `highscore-${props.highScoreLevel}`\n                                            ]\n                                        }\n                                    </td>\n                                    <td>\n                                        {new Date(\n                                            el.lastUpdated\n                                        ).toLocaleDateString()}\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n\n            <button\n                className=\"button high_scores_screen_btn\"\n                onClick={props.onGoBackToHome}\n            >\n                Go Back to Home\n            </button>\n        </div>\n    );\n};\n\nexport default HighScores;\n","export default __webpack_public_path__ + \"static/media/learn-breeds-icon.64e8b116.png\";","import { useEffect, useRef, useState } from \"react\";\nimport GameOver from \"./components/GameOver\";\nimport MainStage from \"./components/MainStage\";\nimport HighScores from \"./components/HighScores\";\n\nimport mainLogo from \"./res/learn-breeds-icon.png\";\n\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getAuth, signInAnonymously, onAuthStateChanged } from \"firebase/auth\";\nimport {\n    getFirestore,\n    doc,\n    setDoc,\n    collection,\n    getDocs,\n    query,\n    orderBy,\n    enableIndexedDbPersistence,\n    getDoc,\n} from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBZ74hwi5Vu1qkL9zRhWetcDour4Wq7a44\",\n    authDomain: \"learn-breeds.firebaseapp.com\",\n    projectId: \"learn-breeds\",\n    storageBucket: \"learn-breeds.appspot.com\",\n    messagingSenderId: \"64861816726\",\n    appId: \"1:64861816726:web:1ef13668f9beb9ca833fb7\",\n    measurementId: \"G-JCG8K2W694\",\n};\n\n// Initialize Firebase\nconst appFB = initializeApp(firebaseConfig);\n// const analytics = getAnalytics(appFB);\n//enable persistence\nconst db = getFirestore();\n\nconst auth = getAuth();\n\nexport type DogType = {\n    message: string;\n    status: string;\n};\ntype PersonalBest = {\n    easy: number;\n    hard: number;\n};\n\nexport type UserType = {\n    uuid: string;\n    username: string;\n    \"highscore-easy\": number;\n    \"highscore-hard\": number;\n    lastUpdated: string;\n};\n\nconst App = () => {\n    const [isGameOn, setIsGameOn] = useState(false);\n    const [showGameOver, setShowGameOver] = useState(false);\n    const [userName, setUserName] = useState(\"\");\n    const [userList, setUserList] = useState<UserType[]>([]);\n    const [showHighScores, setShowHighScores] = useState(false);\n    const [latestScore, setLatestScore] = useState(0);\n    const [currentLevel, setCurrentLevel] = useState(\"easy\"); //easy or hard\n    const [highScoreLevel, setHighScoreLevel] = useState<\"easy\" | \"hard\">(\n        \"easy\"\n    ); //set which level to show high score\n    const curTimer = useRef<NodeJS.Timeout | null>(null);\n    const [isSignedIn, setIsSignedIn] = useState(false); //signed in or not\n    const [initializedState, setInitializedState] = useState(false); //initialized or not\n    const [personalBest, setPersonalBest] = useState<PersonalBest>({\n        easy: 0,\n        hard: 0,\n    }); //personal best score\n    const [uuid, setUuid] = useState(\"\");\n\n    const handleOnChangeUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setUserName(e.currentTarget.value);\n    };\n    //sign in users anonymously\n    useEffect(() => {\n        signInAnonymously(auth)\n            .then(() => {\n                setIsSignedIn(true);\n                onAuthStateChanged(auth, (user) => {\n                    if (user) {\n                        setIsSignedIn(true);\n                        // User is signed in, see docs for a list of available properties\n                        // https://firebase.google.com/docs/reference/js/firebase.User\n                        setUuid(user.uid);\n                        getDoc(doc(db, \"users\", user.uid)).then((doc) => {\n                            if (doc.exists()) {\n                                const data = doc.data();\n                                setPersonalBest({\n                                    easy: data[\"highscore-easy\"],\n                                    hard: data[\"highscore-hard\"],\n                                });\n                                setUserName(data.username);\n                            }\n                            setInitializedState(true);\n                        });\n\n                        // ...\n                    } else {\n                        setUuid(\"\");\n                        // User is signed out\n                        // ...\n                    }\n                });\n                // Signed in..\n            })\n            .catch((error) => {\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                // ...\n            });\n    }, []);\n\n    const onRestartGame = () => {\n        if (curTimer.current) clearTimeout(curTimer.current);\n        setLatestScore(0);\n        setIsGameOn(true);\n        setShowGameOver(false);\n        setShowHighScores(false);\n    };\n    const onGoBackToHome = () => {\n        if (curTimer.current) clearTimeout(curTimer.current);\n        setLatestScore(0);\n        setIsGameOn(false);\n        setShowGameOver(false);\n        setShowHighScores(false);\n    };\n    const onShowHighScores = () => {\n        if (curTimer.current) clearTimeout(curTimer.current);\n        setLatestScore(0);\n        setIsGameOn(false);\n        setShowGameOver(false);\n        setShowHighScores(true);\n    };\n    //update the user list from firestore\n    useEffect(() => {\n        if (!showHighScores) return;\n        getDocs(\n            query(\n                collection(db, \"users\"),\n                orderBy(`highscore-${highScoreLevel}`, \"desc\")\n            )\n        )\n            .then((docs) => {\n                let curUserList: UserType[] = [];\n                docs.forEach((doc) => {\n                    curUserList.push(doc.data() as UserType);\n                });\n                setUserList(curUserList);\n                console.log(curUserList);\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }, [showHighScores, highScoreLevel]);\n\n    //save the latest personal best to firestore\n    useEffect(() => {\n        if (!initializedState) return; //if not initalized, do nothing\n        let scoreToSave = {\n            \"highscore-easy\": personalBest.easy,\n            \"highscore-hard\": personalBest.hard,\n        };\n        console.log(\"this is the uuid\", uuid);\n        //save score to firebase\n        const saveScore = async () => {\n            if (uuid)\n                await setDoc(doc(db, \"users\", uuid), {\n                    ...scoreToSave,\n                    username: userName,\n                    uuid,\n                    lastUpdated: new Date().toISOString(),\n                });\n        };\n        saveScore();\n    }, [userName, personalBest, uuid]);\n\n    const onGameOver = (curScore: number) => {\n        setLatestScore(curScore);\n\n        if (currentLevel === \"easy\")\n            setPersonalBest({\n                ...personalBest,\n                easy: Math.max(curScore, personalBest.easy),\n            });\n        else\n            setPersonalBest({\n                ...personalBest,\n                hard: Math.max(curScore, personalBest.hard),\n            });\n\n        const timer = setTimeout(() => {\n            setIsGameOn(false);\n            setShowGameOver(true);\n            setShowHighScores(false);\n        }, 1000);\n        curTimer.current = timer;\n    };\n\n    if (isGameOn)\n        return (\n            <div>\n                <div>\n                    <MainStage\n                        onGoBackToHome={onGoBackToHome}\n                        onGameOver={onGameOver}\n                        initialRoundTimeInSeconds={15}\n                        currentLevel={currentLevel}\n                    ></MainStage>\n                </div>\n            </div>\n        );\n    else if (showGameOver)\n        return (\n            <GameOver\n                finalScore={latestScore}\n                onRestartGame={onRestartGame}\n                onGoBackToHome={onGoBackToHome}\n            ></GameOver>\n        );\n    else if (showHighScores)\n        return (\n            <HighScores\n                highScoreLevel={highScoreLevel}\n                setHighScoreLevel={setHighScoreLevel}\n                userList={userList}\n                onGoBackToHome={onGoBackToHome}\n            ></HighScores>\n        );\n    else\n        return (\n            <div className=\"home_screen\">\n                <img\n                    src={mainLogo}\n                    alt=\"main logo\"\n                    height={80}\n                    width={80}\n                ></img>\n                <h1 id=\"home_screen_heading\"> Paws a Litter</h1>\n                <div className=\"username\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Enter your username\"\n                        value={userName}\n                        onChange={handleOnChangeUsername}\n                    ></input>\n                </div>\n\n                <button className=\"button\" onClick={onRestartGame}>\n                    Start Game\n                </button>\n                <button className=\"button\" onClick={onShowHighScores}>\n                    Show High Scores\n                </button>\n                <div className=\"level-selector\">\n                    Breed Variety:\n                    <div\n                        className={`level easy ${\n                            currentLevel === \"easy\" ? \"chosen-level\" : \"\"\n                        }`}\n                        onClick={() => setCurrentLevel(\"easy\")}\n                    >\n                        Easy\n                    </div>\n                    <div\n                        className={`level hard ${\n                            currentLevel === \"hard\" ? \"chosen-level\" : \"\"\n                        }`}\n                        onClick={() => setCurrentLevel(\"hard\")}\n                    >\n                        Hard\n                    </div>\n                </div>\n                <div\n                    style={{ textAlign: \"center\", marginTop: \"30px\" }}\n                    className=\"user-stats\"\n                >\n                    <h3> Your Stats</h3>\n                    Personal Best (Easy): {personalBest.easy} <br /> Personal\n                    Best (Hard): {personalBest.hard}\n                </div>\n            </div>\n        );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}